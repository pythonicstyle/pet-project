import logging
import requests
from aiogram import types
from datetime import datetime

from loader import dp, bot
from config_data.config import API_KEY
from keyboards.buttons import main_menu_kb
from keyboards.inline_buttons import moscow_airports_menu_ikb, city_menu_ikb, \
    city_menu__2_ikb, city_menu__3_ikb, city_menu__4_ikb

logging.basicConfig(level=logging.ERROR)


@dp.callback_query_handler()
async def get_actual_weather(callback: types.CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π callback –∑–∞–ø—Ä–æ—Å,
    –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
    –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é
    –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç—É
    """
    if callback.data == "sub_menu":
        await callback.message.edit_reply_markup(reply_markup=moscow_airports_menu_ikb())
    elif callback.data == "city_menu":
        await callback.message.edit_reply_markup(reply_markup=city_menu_ikb())
    elif callback.data == "city_menu_2":
        await callback.message.edit_reply_markup(reply_markup=city_menu__2_ikb())
    elif callback.data == "city_menu_3":
        await callback.message.edit_reply_markup(reply_markup=city_menu__3_ikb())
    elif callback.data == "city_menu_4":
        await callback.message.edit_reply_markup(reply_markup=city_menu__4_ikb())
    elif callback.data == "main_menu":
        await bot.send_message(callback.from_user.id,
                               text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                               reply_markup=main_menu_kb())
        await callback.message.delete()
    else:
        try:
            response = requests.request(method='GET',
                                        url=f'https://api.checkwx.com/metar/{callback.data}/decoded',
                                        headers={'X-API-Key': API_KEY})
            data = response.json()
            location = data['data'][0]['station']['location']
            airport = data['data'][0]['station']['name']
            time = data['data'][0]['observed']
            actual_weather = data['data'][0]['raw_text']

            await callback.message.answer(f"*** {datetime.now().strftime('%d-%m-%Y %H:%M')} ***\n"
                                          f"–ì–æ—Ä–æ–¥: <b>{location}</b>\n–ê—ç—Ä–æ–ø–æ—Ä—Ç: <b>{airport}</b>\n"
                                          f"–í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ —Å–≤–æ–¥–∫–∏:\t{time[11:16]}\n"
                                          f"<b>{actual_weather}</b>\n")
            await callback.answer()
        except Exception:
            await callback.message.answer(f"üóø –ü–æ –∑–∞–ø—Ä–æ—Å—É '{callback.data}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                                          f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–∫–æ–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–µ üóø")
            logging.error(f"user_id={callback.from_user.id} user={callback.from_user.full_name} - request={callback.data}")
            await callback.answer()


@dp.message_handler()
async def actual_weather_func(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏ –∏
    –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ
    –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    if len(message.text) == 4 and message.text.isalpha():
        response = requests.request(method='GET',
                                    url=f'https://api.checkwx.com/metar/{message.text}/decoded',
                                    headers={'X-API-Key': API_KEY})
        try:
            data = response.json()
            location = data['data'][0]['station']['location']
            airport = data['data'][0]['station']['name']
            time = data['data'][0]['observed']
            actual_weather = data['data'][0]['raw_text']

            await message.answer(f"*** {datetime.now().strftime('%d-%m-%Y %H:%M')} ***\n"
                                 f"–ì–æ—Ä–æ–¥: <b>{location}</b>\n–ê—ç—Ä–æ–ø–æ—Ä—Ç: <b>{airport}</b>\n"
                                 f"–í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ —Å–≤–æ–¥–∫–∏:\t{time[11:16]}\n"
                                 f"<b>{actual_weather}</b>\n")

        except Exception:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"user_id={message.from_user.id} user={message.from_user.full_name} - request={message.text}")
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∫–æ–¥–∞ ü§î\n"
                             "–í–≤–µ–¥–∏—Ç–µ 4-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –ò–ö–ê–û –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")
